{"version":3,"sources":["firebase.js","components/Form.js","components/Todo.js","components/TodoList.js","components/TodoApp.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","Form","useState","title","setTitle","className","TextField","variant","label","type","value","onChange","e","target","size","fontSize","onClick","todoRef","database","ref","console","log","todo","complete","push","Todo","completeTodo","child","id","update","motion","div","remove","TodoList","todoList","setTodoList","useEffect","on","snapshot","todos","val","layout","map","index","TodoApp","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5f46f09.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDawvuvAZmkBheTTRdB6_X9idvMC5yVaDs\",\n    authDomain: \"habit-tracker-324008.firebaseapp.com\",\n    projectId: \"habit-tracker-324008\",\n    storageBucket: \"habit-tracker-324008.appspot.com\",\n    messagingSenderId: \"1091835775630\",\n    appId: \"1:1091835775630:web:6af399573346896fdc57df\",\n    databaseURL: \"https://habit-tracker-324008-default-rtdb.europe-west1.firebasedatabase.app/\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;","import React, { useState } from 'react';\nimport firebase from '../firebase';\nimport { TextField } from '@material-ui/core';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\nconst Form = () => {\n    const [title, setTitle] = useState('');\n    const handleOnChange = (e) => {\n        setTitle(e.target.value);\n    }\n    const createTodo = () => {\n        const todoRef = firebase.database().ref('Todo');\n        console.log(11, todoRef);\n        const todo = {\n            title,\n            complete: false,\n        };\n        todoRef.push(todo);\n        setTitle('')\n    }\n    return (\n        <>\n            <div className='form'>\n                <TextField\n                    variant='standard'\n                    label='Add Todo'\n                    type='text'\n                    value={title}\n                    onChange={handleOnChange}\n                    className='textfield'\n                    size='medium'\n                />\n                <div className='add'>\n                    {\n                        title === '' ?\n                            <AddCircleOutlineOutlinedIcon\n                                fontSize='large'\n                                className='icon'\n                            />\n                            :\n                            <AddCircleRoundedIcon\n                                onClick={createTodo}\n                                fontSize='large'\n                                className='icon'\n                            />\n                    }\n                </div>\n            </div>\n        </>\n    );\n}\nexport default Form;","import React from 'react';\nimport firebase from '../firebase';\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\nimport CheckCircleOutlineRoundedIcon from '@material-ui/icons/CheckCircleOutlineRounded';\nimport HighlightOffRoundedIcon from '@material-ui/icons/HighlightOffRounded';\nimport { motion } from 'framer-motion';\nconst Todo = ({ todo }) => {\n    const deleteTodo = () => {\n        const todoRef = firebase.database().ref('Todo').child(todo.id);\n        todoRef.remove();\n    }\n    const completeTodo = () => {\n        const todoRef = firebase.database().ref('Todo').child(todo.id);\n        todoRef.update({\n            complete: !todo.complete,\n        })\n    }\n    return (\n        <>\n            <div\n                className='todo'>\n                <li\n                    className='list'>\n                    {\n                        todo.complete ?\n                            <CheckCircleRoundedIcon\n                                className='icon'\n                                onClick={completeTodo}\n                                fontSize='large'\n                            /> :\n                            <CheckCircleOutlineRoundedIcon\n                                className='icon'\n                                onClick={completeTodo}\n                                fontSize='large'\n                            />\n                    }\n                    <motion.div>\n                        <HighlightOffRoundedIcon\n                            className='icon'\n                            onClick={deleteTodo}\n                            fontSize='large'\n                        />\n                    </motion.div>\n                    <h5 className={todo.complete ? 'complete' : 'pending  '}>{todo.title}</h5>\n                </li>\n            </div>\n        </>\n    );\n}\nexport default Todo;","import { motion } from 'framer-motion';\nimport React, { useState, useEffect } from 'react';\nimport firebase from '../firebase'\nimport Todo from './Todo';\n\nconst TodoList = () => {\n    const [todoList, setTodoList] = useState();\n    useEffect(() => {\n        const todoRef = firebase.database().ref('Todo');\n        todoRef.on('value', (snapshot) => {\n            const todos = snapshot.val();\n            console.log('todos', todos);\n            const todoList = []\n            for (let id in todos) {\n                todoList.push({ id, ...todos[id] });\n            }\n            console.log('todoList', todoList);\n            setTodoList(todoList);\n        })\n    }, [])\n    return (\n        <>\n            <h2>TodoList</h2>\n            <motion.div\n                layout\n            >\n                {todoList ?\n                    todoList.map((todo, index) =>\n                        <Todo todo={todo} key={index} />\n                    )\n                    : ''}\n            </motion.div>\n        </>\n    );\n}\nexport default TodoList;","import { motion } from 'framer-motion';\nimport Form from './Form'\nimport TodoList from './TodoList';\n\nconst TodoApp = () => {\n    return (\n        <>\n            <motion.div className='todoapp'>\n                <h1>Todo App</h1>\n                <Form />\n                <TodoList />\n            </motion.div>\n        </>\n    );\n}\n\nexport default TodoApp;","\nimport React from 'react';\nimport './App.css';\nimport TodoApp from './components/TodoApp'\nfunction App() {\n  return (\n    <>\n      <div className='app'>\n        <TodoApp />\n      </div>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}